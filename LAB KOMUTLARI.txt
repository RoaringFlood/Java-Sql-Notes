											HAFTA 2


SELECT = seçmeye yarar
	SELECT * FROM employees		= "employees" tablosundaki tüm verileri çek (yıldız koyduğumuz için tüm verileri çekti)
	SELECT first_name,salary FROM employees		= "employees" tablosundaki "first_name" ve "salary" sütunlarındaki tüm verileri çekti
	SA_REP first_name,salary FROM employees WHERE salary>=17000		= maaşı 17000 ve daha fazla olan verileri listeler
	SELECT first_name,salary,job_id FROM employees WHERE job_id	= 'SA_REP' 		= "job_id" si "SA_REP" olanları listeler
	
	
	SELECT <sütün adları>
	FROM <tablo ismi>
	WHERE <şart>
	
DESCRIBE - (DESC) = Tablo yapısını döndürür exp = DESCRIBE employees 		NOT= sitede deneme donduruyor siteyi


											HAFTA 3
						
						
			Data manipulation language (DML) (select, insert, update, delete, merge) +PL/SQL
INSERT = Veri eklemeye yarar
	INSERT into ogrenciler VALUES (1810200200,'Ahmet','Turan')		= "ogrenciler" tablosuna verilen değerleri girer
	INSERT into ogrenciler (ogr_no,soyad) VALUES (1810105105,'Terzi')		= "ogrenciler" tablosuna istenilen sütünlara göre veri girer
UPDATE = Verileri güncelleme --' SET ROW = ' dersek, tüm satırları sırasıyla girebiliriz
	UPDATE ogrenciler SET soyad='GUNES' = tüm soyadları "GUNES" yapar
	UPDATE ogrenciler SET soyad='GUNES' WHERE ad='Ahmet' = Adı "Ahmet" olanların soyadını GUNES yapar
DELETE = Silmeye yarar
	DELETE FROM ogrenciler WHERE ogr_no=1810200200 =	"ogr_no" su "1810200200" olan veriyi siler

			Data definition language (DDL)  (create, alter, drop, truncate, comment, rename)
CREATE = Tablo vs oluşturmaya yarar 
	CREATE TABLE calisanlar(
	sicilno number(10),			//"sicilno" adında "number" veri tipine sahip "10" karakterlik alana sahip sütun 
	ad varchar(10),
	bas_tar date,				//"bas_tar" adında veri tipi "date" olan sütun
	PRIMARY KEY (sicilno))		//tablomuzun birincil anahtarını "sicilno" olarak atıyoruz
ALTER = Tablonun sütun adları , veri tipleri , yeniden adlandırma vs gibi tabloyu alakadar eden verileri değiştirir
	ALTER TABLE ogrenciler RENAME COLUMN ad TO isim 	= "ad" sütununun adını "isim" olarak değiştirdik
	ALTER TABLE ogrenciler ADD ders1 varchar(10) 	= "ders1" adında yeni sütun ekledik
	ALTER TABLE ogrenciler DROP COLUMN ders1 	= "ders1" sütununu siler
	ALTER TABLE ogrenciler MODIFY ders1 varchar(20) 	="ders1" sütununun veri tiğini değiştirdik
TRUNCATE = Tablodaki tüm verileri siler(sıfırlar) , WHERE ile kullanılamaz!!
	TRUNCATE TABLE ogrenciler	 ="ogrenciler" tablosunu sıfırlar

			Transaction control language (TCL) +PL/SQL
COMMIT = Yapılan değişiklikleri kalıcı olarak kayıt eder (DDL lar otomatik COMMIT tir)
SAVEPOINT = Daha sonra yapılan değişikliklerden öncesine dönmek için bayrak noktası oluşturulur
ROLLBACK = Bayrak noktalarına geri dönmeyi sağlar
	UPDATE ......
	SAVEPOINT a
	INSERT ......
	SAVEPOINT b      //// Yapılan değişikliklerden sonra alınan save noktalarına "ROLLBACK" komutu ile geri dönülür
	UPDATE ......
	ROLLBACK TO a
			
			Data control language (DCL)
GRANT = Kullanıcılara işlem yetkisi vermeye yarar
	GRANT INSERT,DELETE ON ogrenciler TO yalcin = "yalcin" a "ogrenciler" tablosunda insert ve delete yetkisi verildi
REVOKE = Kullanıcılara verilen yetkileri geri alır
	REVOKE DELETE ON ogrenciler FROM yalcin = "yalcin" a verilen delete yetkisi geri alındı 


											HAFTA 4
	
	
SELECT maas FROM calisanlar WHERE soyad LIKE 'Turan' = "calisanlar" tablosundaki soyadı "Turan" olanın maaşını seçer
		∟→ Projection(Sütun)        ∟→ Selection(Satır)
SELECT ad , maas , maas+300 FROM calisanlar = "calisanlar" tablosunda maaşların üstüne 300 ekleyerek verileri geçici sütun ile çeker
SELECT ad , maas , yas , maas*yas FROM calisanlar = "calisanlar" tablosundaki "maas ve yas" sütunlarındaki verileri çarpıp geçici sütuna ekler

Aliases (AS) = Sütunlara takma isim takmamıza yarar (Değiştirmek istediğimiz isimden hemen sonra (AS yeni_isim),("yeni_isim") 
																				veya tırnak kullanmadan yazmamız gerekir.
	SELECT ad AS isim , maas , yas , maas*yas "Yeni_Sutun" FROM calisanlar = tablodaki "ad" sütununa "isim" , maas*yas sütununa "Yeni_Sutun" dedik.

The Concatenation Operator

|| = Satıları birleştirmeye yarar
	SELECT department_id , department_name , department_id || department_name FROM departments 
		= "department_id" ve "department_name" sütunlarını birleştirip geçici sütunda görütüler
	||' '|| = çıktıların arasında 1 karakterlik boşluk olmasını sağlar
	SELECT first_name ||' '|| last_name AS "Employee Name" FROM employees = Tablodaki isim ve soyadları tek bir sütunda görüntüledik
	
	SELECT last_name || ' has a monthly salary of ' || salary || ' dollars.' AS Pay FROM employees;  (Takma isim verilmezse sütun adı işlemin adını alır)
		Ör. Tablo:
			PAY 		//sütun adı
			King has a monthly salary of 24000 dollars.     	//sütundaki örnek veri
			Kochhar has a monthly salary of 17000 dollars.  	//sütundaki örnek veri

DISTINCT = Tekrarlanan değerlerden sadece birini alır
	SELECT DISTINCT department_id FROM employees
	
	
											HAFTA 5

(<> or != or ^=) = not equal
WHERE = Sorgularda şart için kullanılır
	..... WHERE hire_date < '01-Jan-2000' = belirtilen tarihten önceki kayıtlara ulaşır
	..... WHERE salary >= 6000 = belirtilen değere eşit ve büyük kayıtlara ulaşır
	..... WHERE job_id = 'IT_PROG' = belirtilen veriye eşit kayırlara ulaşır

BETWEEN...AND = belirli bir aralıktaki şartı belirtirken kullanırız (1. değer küçük 2. büyük)
	SELECT last_name, salary FROM employees WHERE salary BETWEEN 9000 AND 11000 	= 9000 ve 11000 arasındaki verilere ulaşır
											WHERE salary >= 9000 AND salary <= 11000   şeklindede yazılabilir
IN = belirtilen değerdeki veya başka değerdeki verilere ulaşmayı sağlar
	SELECT city, state_province, country_id FROM locations WHERE country_id IN('UK', 'CA'); = "country_id" si "UK" ve "CA" olan verileri çeker
														WHERE country_id = 'UK' OR country_id = 'CA'; 
LIKE = Ulaşılmak istenen değerin belirli bir kısmı ile sorgulama yapmaya yarar
	(_) sembolü 1 karakteri temsil eder , (%) karakteri ise 0 veya daha fazla karakteri temsil eder
	SELECT last_name FROM employees WHERE last_name LIKE '_o%';  = Çıktı => "Kochhar" , "Lorentz" , "Mourgos" !!İkinci karakteri 'o' olan değerleri çektik
ESCAPE = "_" gibi karakteri sorguda kullanırken sorun olmaması için kullanılır
	WHERE job_id LIKE '%_R%' = ikinci harfi 'R' olanları listeler
	WHERE job_id LIKE '%/_R%' ESCAPE '/' = ikinci harfi '_R' olanları listeler (ESCAPE ile belirtiğimiz karakterden sonraki yazılanları sorguya dahil eder)
IS NULL, IS NOT NULL =
	WHERE manager_id IS NULL; = "menager_id" si NULL olan değeleri listeler
	WHERE manager_id IS NOT NULL;  = "menager_id" si NULL olmayan değeleri listeler

AND = VE
	WHERE department_id = 50 AND salary > 12000 = "department_id" si 50 ve "salary" si 12000 den büyük olanları seçer
OR = VEYA
	WHERE department_id = 50 OR salary > 12000  = "department_id" si 50 veya "salary" si 12000 den büyük olanları seçer
NOT = DEĞİL
	WHERE location_id NOT IN (1700,1800) = "location_id" si 1700 veya 1800 olmayanları seçer

ORDER OPERATOR  (OPERATÖRLERİN KULLANIM ÖNCELİKLERİ)
	l Arithmetic + - * /
	2 Concatenation| |
	3 Comparison <, <=, >, >=, <>
	4 IS (NOT) NULL, LIKE,(NOT) IN
	5 (NOT) BETWEEN
	6 NOT
	7 AND 
	8 OR


											HAFTA 6


ORDER BY = Sıralama için kullanılır  (default olarak artan şekilde sıralar , Tablonun en sonuna yazılır)
 asc = küçükten büyüğe
 desc = büyükten küçüğe
 NULL olan satırlar en sonra çıkar 
	SELECT last_name, hire_date FROM employees ORDER BY hire_date  = "hire_date" sütununu küçükten büyüğe sıralar
	SELECT last_name, hire_date FROM employees ORDER BY hire_date desc = büyükten küçüğe sıraladı
	SELECT * FROM employees ORDER BY commission_pct NULLS FIRST = Null olanları en yukarı yazar
	SELECT * FROM employees ORDER BY commission_pct desc NULLS LAST = Büyükten küçüğe ve Nullar en sonda
	........ORDER BY department_id desc , last_name = Öncelikle "department_id" e göre sıralar , eğer "department_id" si aynı
													olan değerler varsa onlarıda "last_name" e göre kendi içinde sıralar
													
		FUNCTIONS
−MAX: finds the highest value in a group of rows
	SELECT MAX(menager_id) FROM departments
−MIN: finds the lowest value in a group of rows
−AVG: finds the average value in a group of rows
		
		DUAL TABLE: 
The DUAL table has one row called "X" and one column called "DUMMY"	
	  Ör. =
	SELECT (319/29)+12 FROM DUAL  = "(319/29)+12" olarak sütun adına girilir ve işlemin sonucu "X" satırına yazdırılır.
	  Sonuç =
		(319/29)+12  //SÜTUN
		23			 //Satır
		
LOWER = hepsi küçük
UPPER = hepsi büyük
INITCAP = ilk harf büyük öbürleri küçük
	.....WHERE last_name = 'abel' = Sorgu sonuçsuz kalır çünkü veri tabanında "Abel" olarak kayıtlı.
	.....WHERE LOWER(last_name) = 'abel' = Sorguyu yaparken tüm "last_name" leri küçük harf yaptığı için sorgu çalışır
	.....WHERE INITCAP(last_name) = 'Abel' = Sorgu sorunsuz çalışır

CONCAT = 2 veriyi, yanyana tek sütunda çağırır
	SELECT CONCAT(first_name, last_name) FROM employees = "first_name" , "last_name" ikisi tek sütunda yazar Ör. = "EllenAbel" , "CurtisDavies" vs..
SUBSTR = Stringin istenilen aralıktaki karakterlerini göstermeye yarar
	SELECT SUBSTR('HelloWorld', 1, 5) FROM DUAL  = "Hello"
	SELECT SUBSTR('HelloWorld', 6) FROM DUAL  = "World"
LENGTH = Stringin karakter uzunluğunu gösterir
	SELECT LENGTH('HelloWorld') FROM DUAL = 10 karakterli
	SELECT last_name FROM employees WHERE LENGTH(last_name)<5  = "last_name" i 5 karakterden küçük olanları listeler
INSTR = Girilen karakterin Stringdeki sayısal konumunu gösterir
	SELECT INSTR('HelloWorld', 'W') = 6. sırada


											HAFTA 7
											
											
LPAD = String veride belirttiğimiz adet karakter bulunmuyorsa , ifadenin soluna istediğimiz bir karakteri ekler.
	SELECT LPAD('HelloWorld', 15, '-') FROM DUAL = Ör. "-----HelloWorld"
	SELECT LPAD(last_name, 10, '*') FROM employees = Ör. "******Abel" , "****Davies"
RPAD = LPAD'in sağına yazılan versiyonu '
	!!!!!!!!!
	SELECT LPAD((SUBSTR(tc_no, 9)), 11, '*') AS TCNO FROM ogrenciler   = Tc_No değerinin son 3 rakamını ve öncekileri '*' olarak gösterir
	SELECT LPAD(888, 11, '*') AS TCNO FROM DUAL
	!!!!!!!!!

TRIM = İstenilen konumdaki karakteri kaldırır
	SELECT TRIM (LEADING 'a' FROM 'abcba') FROM DUAL; = "bcba"
	SELECT TRIM (TRAILING 'a' FROM 'abcba') FROM DUAL; = "abcb"	
	SELECT TRIM (BOTH 'a' FROM 'abcba') FROM DUAL; = "bcb"	

REPLACE = Belirtilen bi karakteri kaldırır ve yerine yenisini ekler
	SELECT REPLACE('JACK and JUE', 'J', 'BL') FROM DUAL; = "BLACK and BLUE"
	SELECT REPLACE('JACK and JUE', 'J') FROM DUAL; = ACK and UE
	SELECT REPLACE(last_name, 'a', '*') FROM employees; = "Abel" , "D*vies"

Substitution Variables
	.....WHERE department_id=:enter_dept_id = Kod çalıştıktan sonra "department_id" yi elimizle girebilceğimiz bir pop-up açılır 
							(:) kullandığımız için     (pop-up ekranındaki textte enter_dept_id yazar)

ROUND = Yuvarlama işlemi yapar
	ROUND(45.926) = 46
	ROUND(45.926, 0) = 46
	ROUND(45.926, 2) = 45.93     // Ondalık basamağını(Noktayı) 2 basamak kaydırarak yuvarlama yapar 
	ROUND(45.926, -1) = 50
TRUNC = Virgülden sonraki basamağı yoksayma yapar (veya girilen ondalıktan sonrası için)
	TRUNC (45.926) = 45
	TRUNC (45.926, 0) = 45
	TRUNC (45.926, 2) = 45.92
	TRUNC (45.926, -1) = 40    (Sınavda sormam dedi)
MOD = Mod alma yapar
	SELECT first_name,employee_id , hire_date, mod(employee_id,2) "Çift" FROM employees WHERE mod(employee_id,2)=0    = "employee_id" si çift(mod%2=0) olan çalışanları listeler 
							Sonuna "ORDER BY hire_date desc" eklersek tarihleri azalacak şekilde listeler


											HAFTA 13


SYSDATE = Sistem tarihini verir  
	SELECT SYSDATE FROM DUAL;   =   06-Jun-2021 olarak çıktı verir
	SELECT employee_id, (end_date - start_date)/365 AS "Tenure in last job" FROM job_history;  = işten çıkış tarihinden işe giriş tarihini çıkarıp toplam işte çalışma süresini bulduk
																											(süreyi 365 e bölerek kaç yıl çalıştığını görüntülüyoruz)
Date Functions 	=
	MONTHS_BETWEEN = Number of months between two dates	//1. değer ikinciden büyük olmalı
		...WHERE MONTHS_BETWEEN (SYSDATE, hire_date) > 240; 
	ADD_MONTHS = Add calendar months to date
		SELECT ADD_MONTHS (SYSDATE, 12) AS "Next Year" FROM dual; =şuanki tarihe 12 ay(1 yıl) ekler
	NEXT_DAY = Date of the next occurance of day of the week specified
		SELECT NEXT_DAY (SYSDATE, 'Saturday') AS "Next Saturday" FROM DUAL; =Bir sonraki pazar gününün hangi tarihte olduğunnu döndürür.
	LAST_DAY = Last day of the month
		SELECT LAST_DAY (SYSDATE) AS "End of the Month" FROM dual; == Bulunduğumuz ayın son gününü döndürür
	ROUND = Round date
		ROUND(hire_date, 'Month’) = Ay'ı günün durumuna göre yuvarlar (21-Sep-1989 > 01-Oct-1989) , (13-Jan-1993 , 01-Jan-1993)
		ROUND(hire_date, 'Year’)  = Yıl'ı ayın durumuna göre yuvarlar (21-Sep-1989 > 01-Jan-1990) , (07-Jun-1994 , 01-Jan-1994)
	TRUNC = Truncate date 
		TRUNC(hire_date, 'Month’) = Ay dan sonrasını yok sayar (16-Nov-1999 , 01-Nov-1999) , (29-Jan-1997 , 01-Jan-1997) 
		TRUNC(hire_date, 'Year’) =  Yıldan sonrasını yok sayar (16-Nov-1999 , 01-Jan-1999)


											HAFTA 14


JOINS === İki farklı tablodaki verileri kullanmamıızı sağlar		
NATURAL JOIN = İki farklı tablodaki aynı veri türleri içeren aynı isimdeki sütunlar sayesinde tabloları birleştirmeyi sağlar
		SELECT first_name, last_name, job_id, job_title FROM employees NATURAL JOIN jobs WHERE department_id > 80;   == "employees" ve "jobs" tablosunu "job_id" sayesinde birleştiriyoruz
CROSS JOIN = İki farklı tablodaki istenilen sütun bilgilerini çaprazlama yaparak çeker										
		SELECT last_name, department_name FROM employees CROSS JOIN departments;  == "employees" tablosunda 20 ve "departments" tablosunda 8 satırlık veri olduğu için 
																												CROSS JOIN sonrası toplam 160 satırlık bi tablo döndürecek
USING = İki tablodaki verileri çekerken hangi sütünun dikkate alınacağını belirtiyoruz. (EŞİTLİK DURUMUNDA KULLANILIR)
	SELECT first_name, last_name, department_id, department_name FROM employees JOIN departments USING (department_id);  =
ON = Eşitlik durumu olmadığında (< , > , BETWEEN ) gibi durumlarda kullanılır (İki tablo arasında benzer sütun yoksada iş yapar)
	SELECT last_name, job_title FROM employees e JOIN jobs j ON (e.job_id = j.job_id);  = "job_id" leri eşit olanları listeler
	SELECT last_name, salary, grade_level, lowest_sal,highest_sal FROM employees JOIN job_grades ON(salary BETWEEN lowest_sal AND highest_sal); 
															=maaşı en düşük ve en yüksek maaş aralığına göre grade ini bulup tabloyu oluşturuyor																
	SELECT last_name, department_name AS "Department", city FROM employees JOIN departments USING (department_id) JOIN locations USING (location_id);
						=employees ve departments tablolarını department_id ile , departments ve locations tablosunu ise location_id ile birleştirip 3 tabloda birleşmiş oldu. 
INNER JOINS = Veriler eşleştiği sürece getirilir (JOIN) le aynı yani yukaridaki yaptıklarımız INNER JOINDIR
OUTER JOINS = Eşleşmeyen veya olmayan verileride getirmek için kullanılır
	LEFT OUTER JOIN = SOLDAKİ YAZAN TABLONUN DEĞERİ YOKSA GETİRMEYE YARAR
		SELECT e.last_name, d.department_id, d.department_name FROM employees e LEFT OUTER JOIN departments d ON (e.department_id = d.department_id);
				=employees tablosunda department_id si olmayan veya uyuşmayan verileride getirir
	RIGHT OUTER JOIN = SAĞDAKİ YAZAN TABLONUN DEĞERİ YOKSA GETİRMEYE YARAR
	FULL OUTER JOIN = Hem LEFT hemde RIGHT JOIN i aynı anda kullanır


											HAFTA 15


SUBQUERY = İç içe sorgular
−Single-row subqueries that use single-row operators (>, =, >=,<, <>, <=) and return only one row from the inner query
−Multiple-row subqueries that use multiple-row operators (IN,ANY, ALL) and return more than one row from the inner query

SINGLE-ROW SUBQUERY =
	SELECT first_name, last_name, hire_date FROM employees WHERE hire_date > (SELECT hire_date FROM employees WHERE last_name = 'Vargas');
		=last_name i "Vargas" olan kişiden daha sonra işe girmiş kişileri listelemeye yarar
	SELECT last_name FROM employees WHERE department_id = (SELECT department_id FROM employees WHERE last_name = 'Grant');
		=last_name i "Grant" olan kişinin department_id si NULL olduğu için veri bulamıcak (no data found)
	SELECT last_name, job_id, department_id FROM employees WHERE department_id = (SELECT department_id FROM departments WHERE department_name = 'Marketing') ORDER BY job_id;
		=Başka bi tablodaki veri ile karşılaştırma örneği
	SELECT last_name, salary FROM employees WHERE salary < (SELECT AVG(salary) FROM employees);
		=Maaşların toplamından daha düşük maaş alanları listelememizi sağlar.

EXTRACT(YEAR FROM hire_date) = tarihin sadece yıl değerini çekmemizi sağlıyo
		
HAVING = Genelde grup fonksiyonları ile kullanılılr (AVG , MIN , MAX , COUNT , SUM) gibi
	SELECT department_id, MIN(salary) FROM employees GROUP BY department_id HAVING MIN(salary) > (SELECT MIN(salary) FROM employees WHERE department_id = 50);
			=Which departments have a lowest salary that is greater than the lowest salary in department 50? 
			=Hangi departmanların en düşük maaşı , departman 50 nin en düşük maaşaından fazladır
			
MULTIPLE-ROW SUBQUERY =
	IN =  (EŞİTTİR GİBİ, MULTİPLE-ROW LARDA KULLANILIR)
		SELECT last_name, hire_date FROM employees WHERE EXTRACT(YEAR FROM hire_date) IN (SELECT EXTRACT(YEAR FROM hire_date) FROM employees WHERE department_id=90);
				= department_id si 90 olanların hire_date lerine eşit olan verileri çeker
	ANY= (< , > , = gibi işaretlerle kullanılabilir ) Herhangi biri anlamında kullanılır.
		SELECT last_name, hire_date FROM employees WHERE EXTRACT(YEAR FROM hire_date) < ANY (SELECT EXTRACT(YEAR FROM hire_date) FROM employees WHERE department_id=90);
				=hire_date i department_id si 90 olanların hire_date lerinin herhangi birinden düşük olan verileri çeker.
	ALL= "Hepsi" durumlarında kullanılır. Any gibi kullanılır
		SELECT last_name, hire_date FROM employees WHERE EXTRACT(YEAR FROM hire_date) < ALL (SELECT EXTRACT(YEAR FROM hire_date) FROM employees WHERE department_id=90);
				=hire_date i department_id si 90 olanların hire_date lerinin hepsinden düşük olan verileri çeker.
NULL VALUES = 
	IN ve ANY = outer query (içerideki sorgu) nin değerlerinden biri NULL sa NULL olmayan değerleri döndürür
	ALL = outer query nin değerlerinden biri NULL sa değer döndüremez(no data found)

HAVING VE GROUP-BY ÖRNEK:
	SELECT department_id, MIN(salary) FROM employees GROUP BY department_id HAVING MIN(salary) < ANY (SELECT salary FROM employees WHERE department_id IN (10,20)) ORDER BY department_id;
		=Departman 10 veya 20 de çalışan kişilerin min maaşından daha düşük maaşı olanları gruplayarak listeler
Correlated Subquery Example :
	SELECT o.first_name,o.last_name, o.salary FROM employees o WHERE o.salary > (SELECT AVG(i.salary) FROM employees i WHERE i.department_id = o.department_id);
		=Kimler çalıştığı departmanın maaş ortalamasından daha yüksek maaş alıyor.
NOT EXISTS : Bulunmayan , olmayan manasında kullanılır
	SELECT last_name AS "Not a Manager" FROM employees emp WHERE NOT EXISTS (SELECT * FROM employees mgr WHERE mgr.manager_id = emp.employee_id);	
		=Which employees are not managers?
EXISTS : Bulunan , olan manasında

WITH : Sorguya etiket vermeye yarar .Çok uzayan sorgularda , sorguları sadeleştirmek , kısaltmak için kullanılır
	WITH managers AS		-->> == Sorgunun devamında her "managers" yazdığımızda içerikdeki kod yazılmış sayılır.
		(SELECT DISTINCT manager_id
		FROM employees
		WHERE manager_id IS NOT NULL)
	SELECT last_name AS "Not a manager" 	
	FROM employees
	WHERE employee_id NOT IN
		(SELECT *
		FROM managers);  --->> Mesela burda direk yukarıdaki parantez içindeki kod yazılmış sayılıyor.
GROUP BY : 
	SELECT department_id, AVG(salary) FROM employees GROUP BY department_id
		=her bir department_id nin maaş ortalamasını getirir
COUNT : Bir veri grubundaki veri adet sayısını getirir
		...COUNT(salary)... olara kullanılır (kaç tane salary satırı varsa , adetini döndürür)
SUM :  toplamaya yarar
		...SUM(salary)... tüm salary leri toplar
